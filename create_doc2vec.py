# coding: utf-8

__author__      = "Ciprian-Octavian Truică, Elena-Simona Apostol, Maria-Luiza Șerban"
__copyright__   = "Copyright 2021, University Politehnica of Bucharest"
__license__     = "GNU GPL"
__version__     = "0.1"
__email__       = "{ciprian.truica,elena.apostol,maria_luiza.serban}@upb.ro"
__status__      = "Development"


from sklearn.feature_extraction.text import TfidfVectorizer
# Word2Vec
from gensim.models import Word2Vec

# FastText
from gensim.models import FastText

# Glove
from glove import Corpus, Glove

import pandas as pd
import numpy as np

from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor
from multiprocessing import cpu_count

import sys

no_threads = cpu_count() - 2

MODELS_FOLDER = './models/'

# the output file generated by the clean_data.py
GAME_REVIEWS_CLEAN = sys.argv[1]

emb_name = sys.argv[2]

def stringToStringList(text):
    resultList = text.split("', '")
    resultList[0] = resultList[0][2:]
    resultList[-1] = resultList[-1][:-2]
    return resultList

def stringToFloatList(text):
    resultList = text.split(" ")
    resultList[0] = resultList[0][2:]
    resultList[-1] = resultList[-1][:-2]
    while("" in resultList) : 
        resultList.remove("") 
    for idx in range(len(resultList)):
        try:
            resultList[idx] = float(str(resultList[idx]).replace('\\n', ''))
        except:
            pass
    return np.array(resultList)

if emb_name == "W2V_CBOW_100":
    print("Loding W2V_CBOW_100 models")
    size = 100
    model = Word2Vec.load(MODELS_FOLDER + 'W2V_CBOW_100.model')
    topic2doc_lda = pd.read_csv(MODELS_FOLDER + "LDA_W2V_CBOW_100.csv", encoding = "utf-8")
    topic2doc_nmf = pd.read_csv(MODELS_FOLDER + "NMF_W2V_CBOW_100.csv", encoding = "utf-8")
    topic2doc_lsi = pd.read_csv(MODELS_FOLDER + "LSI_W2V_CBOW_100.csv", encoding = "utf-8")
elif emb_name == "W2V_CBOW_256":
    print("Loding W2V_CBOW_256 models")
    size = 256
    model = Word2Vec.load(MODELS_FOLDER + 'W2V_CBOW_256.model')
    topic2doc_lda = pd.read_csv(MODELS_FOLDER + "LDA_W2V_CBOW_256.csv", encoding = "utf-8")
    topic2doc_nmf = pd.read_csv(MODELS_FOLDER + "NMF_W2V_CBOW_256.csv", encoding = "utf-8")
    topic2doc_lsi = pd.read_csv(MODELS_FOLDER + "LSI_W2V_CBOW_256.csv", encoding = "utf-8")
elif emb_name == "W2V_SG_100":
    print("Loding W2V_SG_100 models")
    size = 100
    model = Word2Vec.load(MODELS_FOLDER + 'W2V_SG_100.model')
    topic2doc_lda = pd.read_csv(MODELS_FOLDER + "LDA_W2V_SG_100.csv", encoding = "utf-8")
    topic2doc_nmf = pd.read_csv(MODELS_FOLDER + "NMF_W2V_SG_100.csv", encoding = "utf-8")
    topic2doc_lsi = pd.read_csv(MODELS_FOLDER + "LSI_W2V_SG_100.csv", encoding = "utf-8") 
elif emb_name == "W2V_SG_128":
    print("Loding W2V_SG_128 models")
    size = 128
    model = Word2Vec.load(MODELS_FOLDER + 'W2V_SG_128.model')
    topic2doc_lda = pd.read_csv(MODELS_FOLDER + "LDA_W2V_SG_128.csv", encoding = "utf-8")
    topic2doc_nmf = pd.read_csv(MODELS_FOLDER + "NMF_W2V_SG_128.csv", encoding = "utf-8")
    topic2doc_lsi = pd.read_csv(MODELS_FOLDER + "LSI_W2V_SG_128.csv", encoding = "utf-8")
elif emb_name == "FT_CBOW_256":
    print("Loding FT_CBOW_256 models")
    size = 256
    model = FastText.load(MODELS_FOLDER + 'FT_CBOW_256.model')
    topic2doc_lda = pd.read_csv(MODELS_FOLDER + "LDA_FT_CBOW_256.csv", encoding = "utf-8")
    topic2doc_nmf = pd.read_csv(MODELS_FOLDER + "NMF_FT_CBOW_256.csv", encoding = "utf-8")
    topic2doc_lsi = pd.read_csv(MODELS_FOLDER + "LSI_FT_CBOW_256.csv", encoding = "utf-8")    
elif emb_name == "FT_CBOW_100":
    print("Loding FT_CBOW_100 models")
    size = 100
    model = FastText.load(MODELS_FOLDER + 'FT_CBOW_100.model')
    topic2doc_lda = pd.read_csv(MODELS_FOLDER + "LDA_FT_CBOW_100.csv", encoding = "utf-8")
    topic2doc_nmf = pd.read_csv(MODELS_FOLDER + "NMF_FT_CBOW_100.csv", encoding = "utf-8")
    topic2doc_lsi = pd.read_csv(MODELS_FOLDER + "LSI_FT_CBOW_100.csv", encoding = "utf-8")
elif emb_name == "FT_SG_128":
    print("Loding FT_SG_128 models")
    size = 128
    model = FastText.load(MODELS_FOLDER + 'FT_SG_128.model')
    topic2doc_lda = pd.read_csv(MODELS_FOLDER + "LDA_FT_SG_128.csv", encoding = "utf-8")
    topic2doc_nmf = pd.read_csv(MODELS_FOLDER + "NMF_FT_SG_128.csv", encoding = "utf-8")
    topic2doc_lsi = pd.read_csv(MODELS_FOLDER + "LSI_FT_SG_128.csv", encoding = "utf-8")
elif emb_name == "FT_SG_100":
    print("Loding FT_SG_100 models")
    size = 100
    model = FastText.load(MODELS_FOLDER + 'FT_SG_100.model')    
    topic2doc_lda = pd.read_csv(MODELS_FOLDER + "LDA_FT_SG_100.csv", encoding = "utf-8")
    topic2doc_nmf = pd.read_csv(MODELS_FOLDER + "NMF_FT_SG_100.csv", encoding = "utf-8")
    topic2doc_lsi = pd.read_csv(MODELS_FOLDER + "LSI_FT_SG_100.csv", encoding = "utf-8")
    
elif emb_name == "GLOVE_128":
    print("Loding GLOVE_128 models")
    size = 128
    model = Glove.load(MODELS_FOLDER + 'GLOVE_128.model')
    topic2doc_lda = pd.read_csv(MODELS_FOLDER + "LDA_GLOVE_128.csv", encoding = "utf-8")
    topic2doc_nmf = pd.read_csv(MODELS_FOLDER + "NMF_GLOVE_128.csv", encoding = "utf-8")
    topic2doc_lsi = pd.read_csv(MODELS_FOLDER + "LSI_GLOVE_128.csv", encoding = "utf-8")
elif emb_name == "GLOVE_100":
    print("Loding GLOVE_100 models")
    size = 100
    model = Glove.load(MODELS_FOLDER + 'GLOVE_100.model')
    topic2doc_lda = pd.read_csv(MODELS_FOLDER + "LDA_GLOVE_100.csv", encoding = "utf-8")
    topic2doc_nmf = pd.read_csv(MODELS_FOLDER + "NMF_GLOVE_100.csv", encoding = "utf-8")
    topic2doc_lsi = pd.read_csv(MODELS_FOLDER + "LSI_GLOVE_100.csv", encoding = "utf-8")
    


# DATASET
dataSet = pd.read_csv(MODELS_FOLDER + GAME_REVIEWS_CLEAN, encoding = "utf-8")
dataSet.normalized = dataSet.normalized.apply(stringToStringList)

# TOPIC2DOC
topic2doc_lda.vec = topic2doc_lda.vec.apply(stringToFloatList)
topic2doc_nmf.vec = topic2doc_nmf.vec.apply(stringToFloatList)
topic2doc_lsi.vec = topic2doc_lsi.vec.apply(stringToFloatList)

# TFIDF Matrix
def getVectorizedData(data):
    vectorizer = TfidfVectorizer(analyzer=lambda x: x, min_df=1, lowercase=False)
    vectorizer_fit = vectorizer.fit(data)
    data_vectorized = vectorizer_fit.transform(data)
    return data_vectorized, vectorizer, vectorizer_fit

data_vectorized, vectorizer, vectorizer_fit = getVectorizedData(dataSet['normalized'])

def buildWordVector(line):
    # average review
    doc2vec = np.zeros(size)
    doc2vec_tfidf = np.zeros(size)
    doc2vec_lda = np.zeros(size)
    doc2vec_nmf = np.zeros(size)
    doc2vec_lsi = np.zeros(size)
    doc2vec_tfidf_lda = np.zeros(size)
    doc2vec_tfidf_nmf = np.zeros(size)
    doc2vec_tfidf_lsi = np.zeros(size)
    lda_vec = topic2doc_lda.loc[topic2doc_lda['topic'] == line[5], 'vec'].iloc[0]
    nmf_vec = topic2doc_nmf.loc[topic2doc_nmf['topic'] == line[3], 'vec'].iloc[0]
    lsi_vec = topic2doc_lsi.loc[topic2doc_lsi['topic'] == line[4], 'vec'].iloc[0]
    count = 0.
    docID = line[-1]
    for word in line[1]:
        try:
            if(isinstance(model, Glove)):
                current = model.word_vectors[model.dictionary[word]]
            else:
                current = model.wv[word]
            wordID = vectorizer.get_feature_names().index(word)
            doc2vec_tfidf += current * data_vectorized[docID, wordID]
            doc2vec += current
            count += 1.
        except KeyError: 
            continue
    if count != 0:
        doc2vec_tfidf /= count
        doc2vec /= count
        doc2vec_lda = np.concatenate((doc2vec, lda_vec), axis=None)
        doc2vec_nmf = np.concatenate((doc2vec, nmf_vec), axis=None)
        doc2vec_lsi = np.concatenate((doc2vec, lsi_vec), axis=None)
        doc2vec_tfidf_lda = np.concatenate((doc2vec_tfidf, lda_vec), axis=None)
        doc2vec_tfidf_nmf = np.concatenate((doc2vec_tfidf, nmf_vec), axis=None)
        doc2vec_tfidf_lsi = np.concatenate((doc2vec_tfidf, lsi_vec), axis=None)
    return (docID, doc2vec.tolist(), doc2vec_tfidf.tolist(), doc2vec_lda.tolist(), doc2vec_nmf.tolist(), doc2vec_lsi.tolist(), doc2vec_tfidf_lda.tolist(), doc2vec_tfidf_nmf.tolist(), doc2vec_tfidf_lsi.tolist(),)

if __name__ == '__main__':
    dataSet['docid'] = dataSet.index
    columns = dataSet.columns

    # print(topic2doc_lda)
    # print(topic2doc_nmf)
    # print(topic2doc_lsi)


    doc2vec_tfidf = [ [] for _ in range(dataSet.shape[0])]
    doc2vec = [ [] for _ in range(dataSet.shape[0])]
    doc2vec_lda = [ [] for _ in range(dataSet.shape[0])]
    doc2vec_nmf = [ [] for _ in range(dataSet.shape[0])]
    doc2vec_lsi = [ [] for _ in range(dataSet.shape[0])]
    doc2vec_tfidf_lda = [ [] for _ in range(dataSet.shape[0])]
    doc2vec_tfidf_nmf = [ [] for _ in range(dataSet.shape[0])]
    doc2vec_tfidf_lsi = [ [] for _ in range(dataSet.shape[0])]

    print(dataSet.shape)
    with ProcessPoolExecutor(max_workers=no_threads) as worker:
        for result in worker.map(buildWordVector, dataSet.to_numpy()):
            if result:
                doc2vec_tfidf[result[0]] = result[1]
                doc2vec[result[0]] = result[2]
                doc2vec_lda[result[0]] = result[3]
                doc2vec_nmf[result[0]] = result[4]
                doc2vec_lsi[result[0]] = result[5]
                doc2vec_tfidf_lda[result[0]] = result[6]
                doc2vec_tfidf_nmf[result[0]] = result[7]
                doc2vec_tfidf_lsi[result[0]] = result[8]

    # print(columns)
    # print(dataSet.head(5))
    # print()
    # print(dataSet['review'][0])
    # print(dataSet['normalized'][0])
    # print(dataSet['polarity'][0])

    polarity = dataSet.polarity
    list_df = [dataSet, topic2doc_lda, topic2doc_nmf,  topic2doc_lsi]
    del list_df

    
    # print(vectors)
    df_doc2vec = pd.DataFrame({"vec": doc2vec, "polarity": polarity})
    df_doc2vec.to_csv(MODELS_FOLDER + emb_name + "_DOC2VEC.csv", encoding = "utf-8", index = False, header=True)

    df_doc2vec_tfidf = pd.DataFrame({"vec": doc2vec_tfidf, "polarity": polarity})
    df_doc2vec_tfidf.to_csv(MODELS_FOLDER + emb_name + "_DOC2VEC_TFIDF.csv", encoding = "utf-8", index = False, header=True)

    df_doc2vec_lda = pd.DataFrame({"vec": doc2vec_lda, "polarity": polarity})
    df_doc2vec_lda.to_csv(MODELS_FOLDER + emb_name + "_DOC2VEC_LDA.csv", encoding = "utf-8", index = False, header=True)

    df_doc2vec_nmf = pd.DataFrame({"vec": doc2vec_nmf, "polarity": polarity})
    df_doc2vec_nmf.to_csv(MODELS_FOLDER + emb_name + "_DOC2VEC_NMF.csv", encoding = "utf-8", index = False, header=True)

    df_doc2vec_lsi = pd.DataFrame({"vec": doc2vec_lsi, "polarity": polarity})
    df_doc2vec_lsi.to_csv(MODELS_FOLDER + emb_name + "_DOC2VEC_LSI.csv", encoding = "utf-8", index = False, header=True)

    df_doc_tfidf2vec_lda = pd.DataFrame({"vec": doc2vec_tfidf_lda, "polarity": polarity})
    df_doc_tfidf2vec_lda.to_csv(MODELS_FOLDER + emb_name + "_DOC2VEC_TFIDF_LDA.csv", encoding = "utf-8", index = False, header=True)

    df_doc_tfidf2vec_nmf = pd.DataFrame({"vec": doc2vec_tfidf_nmf, "polarity": polarity})
    df_doc_tfidf2vec_nmf.to_csv(MODELS_FOLDER + emb_name + "_DOC2VEC_TFIDF_NMF.csv", encoding = "utf-8", index = False, header=True)

    df_doc_tfidf2vec_lsi = pd.DataFrame({"vec": doc2vec_tfidf_lsi, "polarity": polarity})
    df_doc_tfidf2vec_nmf.to_csv(MODELS_FOLDER + emb_name + "_DOC2VEC_TFIDF_LSI.csv", encoding = "utf-8", index = False, header=True)